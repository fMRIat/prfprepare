#!/usr/bin/env bash

###############################################################################
# prfprepare container entrypoint
# Responsibilities:
#   1. Parse args / show help
#   2. Launch orchestrator Python script
#   3. Fix output permissions (without making things world-writable if avoidable)
#   4. Provide clear, timestamped logging + robust error handling
###############################################################################

# Safety settings (pipefail + nounset). Allow unbound in case of optional vars? No.
set -Euo pipefail
IFS=$'\n\t'

###############################################################################
# Globals
GEAR="prfprepare"
REPO="davidlinhardt"
CONTAINER="[${REPO}/${GEAR}]"
DATA_DIR="/base/data"
SCRIPTS_DIR="/base/scripts"
DEFAULT_CONFIG="${SCRIPTS_DIR}/default_config.json"
OUTPUT_DIR="${DATA_DIR}/derivatives/prfprepare"

VERBOSE=0
FORCE=0
CONFIG_FILE=""   # Will default to DEFAULT_CONFIG if not provided

export PYTHONUNBUFFERED=1

###############################################################################
# Logging helpers
log() { printf '%s %s %s\n' "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" "$CONTAINER" "$*"; }
debug() { [ "$VERBOSE" -eq 1 ] && log "[DEBUG] $*"; }
warn() { printf '%s %s <WARN> %s\n' "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" "$CONTAINER" "$*" >&2; }
err()  { printf '%s %s <ERROR> %s\n' "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" "$CONTAINER" "$*" >&2; }
die()  { err "$*"; exit 1; }

usage() {
        cat <<EOF
${CONTAINER} prfprepare entrypoint

Usage: run [OPTIONS] [config.json]

Options:
    -h, --help              Show this help and exit
    -v, --verbose           Verbose / debug logging
    -f, --force             Force overwrite behaviors (exported to Python)
        --config PATH       Explicit config file (overrides default & positional)
    DEBUG                   Drop into interactive shell instead of running

Arguments:
    config.json             (legacy) Config path if provided as sole positional
                             (ignored if --config used)
EOF
}

###############################################################################
# Early special modes
if [[ "${1:-}" == "DEBUG" ]]; then
    exec /bin/bash
fi

if [[ "${1:-}" =~ ^(-h|--help|-help|help)$ ]]; then
    if [[ -f /opt/help.txt ]]; then
        cat /opt/help.txt
        echo
    fi
    usage
    exit 0
fi

###############################################################################
# Argument parsing (simple manual loop to preserve original interface)
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help) usage; exit 0 ;;
        -v|--verbose) VERBOSE=1 ;;
        -f|--force) FORCE=1 ;;
        --config)
                shift || die "--config requires a path"
                CONFIG_FILE="$1" ;;
        --config=*)
                CONFIG_FILE="${1#*=}" ;;
        DEBUG) die "DEBUG must be first argument if used" ;;
        -*) die "Unknown option: $1" ;;
        *)
                # legacy positional config (only if not already set by --config)
                if [[ -z "$CONFIG_FILE" || "$CONFIG_FILE" == "$DEFAULT_CONFIG" ]]; then
                    CONFIG_FILE="$1"
                else
                    warn "Ignoring extra positional argument '$1'"
                fi ;;
    esac
    shift
done

CONFIG_FILE="${CONFIG_FILE:-$DEFAULT_CONFIG}"

###############################################################################
# Trap / cleanup
on_exit() {
    local ec=$?
    if [[ $ec -eq 0 ]]; then
        log "Completed (exit=$ec)"
    else
        err "Aborted (exit=$ec)"
    fi
}
trap on_exit EXIT
trap 'die "Interrupted"' INT TERM

log "Initiated"
debug "FORCE=$FORCE VERBOSE=$VERBOSE CONFIG_FILE=$CONFIG_FILE"

[[ -r "$CONFIG_FILE" ]] || die "Config file not readable: $CONFIG_FILE"

export FORCE VERBOSE

###############################################################################
# Run orchestrator (add flags only when set)
PY_ARGS=(--config "$CONFIG_FILE")
(( FORCE )) && PY_ARGS+=(--force)
(( VERBOSE )) && PY_ARGS+=(--verbose)

echo "##############################################################################"
echo "                              Running prfprepare                              "
echo "##############################################################################"
echo; echo
python ${SCRIPTS_DIR}/run.py "${PY_ARGS[@]}" || die "Python orchestrator failed"

[[ -d "$OUTPUT_DIR" ]] || die "Output directory not created: $OUTPUT_DIR"

#####################################################
echo "##############################################################################"##########################
echo; echo
# Permissions
if [[ -d "$OUTPUT_DIR" ]]; then
    debug "Fixing permissions under $OUTPUT_DIR"
    # Grant group write and read/exec to all; avoid 777 unless required.
    # If world-writable is truly desired uncomment the alternative lines.
    find "$OUTPUT_DIR" -type d -exec chmod 775 {} +
    find "$OUTPUT_DIR" -type f -exec chmod 664 {} +
    # Alternative (less safe): chmod -R 777/666
else
    warn "Expected output subdir missing: $OUTPUT_DIR"
fi

log "Finished"
exit 0
